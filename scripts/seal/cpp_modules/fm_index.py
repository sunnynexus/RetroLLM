# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _fm_index
else:
    import _fm_index

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fm_index.delete_SwigPyIterator

    def value(self):
        return _fm_index.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _fm_index.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _fm_index.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _fm_index.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _fm_index.SwigPyIterator_equal(self, x)

    def copy(self):
        return _fm_index.SwigPyIterator_copy(self)

    def next(self):
        return _fm_index.SwigPyIterator_next(self)

    def __next__(self):
        return _fm_index.SwigPyIterator___next__(self)

    def previous(self):
        return _fm_index.SwigPyIterator_previous(self)

    def advance(self, n):
        return _fm_index.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _fm_index.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _fm_index.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _fm_index.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _fm_index.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _fm_index.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _fm_index.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _fm_index:
_fm_index.SwigPyIterator_swigregister(SwigPyIterator)
class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _fm_index.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fm_index.IntVector___nonzero__(self)

    def __bool__(self):
        return _fm_index.IntVector___bool__(self)

    def __len__(self):
        return _fm_index.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _fm_index.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fm_index.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fm_index.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fm_index.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fm_index.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fm_index.IntVector___setitem__(self, *args)

    def pop(self):
        return _fm_index.IntVector_pop(self)

    def append(self, x):
        return _fm_index.IntVector_append(self, x)

    def empty(self):
        return _fm_index.IntVector_empty(self)

    def size(self):
        return _fm_index.IntVector_size(self)

    def swap(self, v):
        return _fm_index.IntVector_swap(self, v)

    def begin(self):
        return _fm_index.IntVector_begin(self)

    def end(self):
        return _fm_index.IntVector_end(self)

    def rbegin(self):
        return _fm_index.IntVector_rbegin(self)

    def rend(self):
        return _fm_index.IntVector_rend(self)

    def clear(self):
        return _fm_index.IntVector_clear(self)

    def get_allocator(self):
        return _fm_index.IntVector_get_allocator(self)

    def pop_back(self):
        return _fm_index.IntVector_pop_back(self)

    def erase(self, *args):
        return _fm_index.IntVector_erase(self, *args)

    def __init__(self, *args):
        _fm_index.IntVector_swiginit(self, _fm_index.new_IntVector(*args))

    def push_back(self, x):
        return _fm_index.IntVector_push_back(self, x)

    def front(self):
        return _fm_index.IntVector_front(self)

    def back(self):
        return _fm_index.IntVector_back(self)

    def assign(self, n, x):
        return _fm_index.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _fm_index.IntVector_resize(self, *args)

    def insert(self, *args):
        return _fm_index.IntVector_insert(self, *args)

    def reserve(self, n):
        return _fm_index.IntVector_reserve(self, n)

    def capacity(self):
        return _fm_index.IntVector_capacity(self)
    __swig_destroy__ = _fm_index.delete_IntVector

# Register IntVector in _fm_index:
_fm_index.IntVector_swigregister(IntVector)
class IntVectorVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _fm_index.IntVectorVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fm_index.IntVectorVector___nonzero__(self)

    def __bool__(self):
        return _fm_index.IntVectorVector___bool__(self)

    def __len__(self):
        return _fm_index.IntVectorVector___len__(self)

    def __getslice__(self, i, j):
        return _fm_index.IntVectorVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fm_index.IntVectorVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fm_index.IntVectorVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fm_index.IntVectorVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fm_index.IntVectorVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fm_index.IntVectorVector___setitem__(self, *args)

    def pop(self):
        return _fm_index.IntVectorVector_pop(self)

    def append(self, x):
        return _fm_index.IntVectorVector_append(self, x)

    def empty(self):
        return _fm_index.IntVectorVector_empty(self)

    def size(self):
        return _fm_index.IntVectorVector_size(self)

    def swap(self, v):
        return _fm_index.IntVectorVector_swap(self, v)

    def begin(self):
        return _fm_index.IntVectorVector_begin(self)

    def end(self):
        return _fm_index.IntVectorVector_end(self)

    def rbegin(self):
        return _fm_index.IntVectorVector_rbegin(self)

    def rend(self):
        return _fm_index.IntVectorVector_rend(self)

    def clear(self):
        return _fm_index.IntVectorVector_clear(self)

    def get_allocator(self):
        return _fm_index.IntVectorVector_get_allocator(self)

    def pop_back(self):
        return _fm_index.IntVectorVector_pop_back(self)

    def erase(self, *args):
        return _fm_index.IntVectorVector_erase(self, *args)

    def __init__(self, *args):
        _fm_index.IntVectorVector_swiginit(self, _fm_index.new_IntVectorVector(*args))

    def push_back(self, x):
        return _fm_index.IntVectorVector_push_back(self, x)

    def front(self):
        return _fm_index.IntVectorVector_front(self)

    def back(self):
        return _fm_index.IntVectorVector_back(self)

    def assign(self, n, x):
        return _fm_index.IntVectorVector_assign(self, n, x)

    def resize(self, *args):
        return _fm_index.IntVectorVector_resize(self, *args)

    def insert(self, *args):
        return _fm_index.IntVectorVector_insert(self, *args)

    def reserve(self, n):
        return _fm_index.IntVectorVector_reserve(self, n)

    def capacity(self):
        return _fm_index.IntVectorVector_capacity(self)
    __swig_destroy__ = _fm_index.delete_IntVectorVector

# Register IntVectorVector in _fm_index:
_fm_index.IntVectorVector_swigregister(IntVectorVector)
class IntIntPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fm_index.IntIntPair_swiginit(self, _fm_index.new_IntIntPair(*args))
    first = property(_fm_index.IntIntPair_first_get, _fm_index.IntIntPair_first_set)
    second = property(_fm_index.IntIntPair_second_get, _fm_index.IntIntPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _fm_index.delete_IntIntPair

# Register IntIntPair in _fm_index:
_fm_index.IntIntPair_swigregister(IntIntPair)
class StringVectorPair(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _fm_index.StringVectorPair_swiginit(self, _fm_index.new_StringVectorPair(*args))
    first = property(_fm_index.StringVectorPair_first_get, _fm_index.StringVectorPair_first_set)
    second = property(_fm_index.StringVectorPair_second_get, _fm_index.StringVectorPair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _fm_index.delete_StringVectorPair

# Register StringVectorPair in _fm_index:
_fm_index.StringVectorPair_swigregister(StringVectorPair)
class StringVectorPairVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _fm_index.StringVectorPairVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fm_index.StringVectorPairVector___nonzero__(self)

    def __bool__(self):
        return _fm_index.StringVectorPairVector___bool__(self)

    def __len__(self):
        return _fm_index.StringVectorPairVector___len__(self)

    def __getslice__(self, i, j):
        return _fm_index.StringVectorPairVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _fm_index.StringVectorPairVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _fm_index.StringVectorPairVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _fm_index.StringVectorPairVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _fm_index.StringVectorPairVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _fm_index.StringVectorPairVector___setitem__(self, *args)

    def pop(self):
        return _fm_index.StringVectorPairVector_pop(self)

    def append(self, x):
        return _fm_index.StringVectorPairVector_append(self, x)

    def empty(self):
        return _fm_index.StringVectorPairVector_empty(self)

    def size(self):
        return _fm_index.StringVectorPairVector_size(self)

    def swap(self, v):
        return _fm_index.StringVectorPairVector_swap(self, v)

    def begin(self):
        return _fm_index.StringVectorPairVector_begin(self)

    def end(self):
        return _fm_index.StringVectorPairVector_end(self)

    def rbegin(self):
        return _fm_index.StringVectorPairVector_rbegin(self)

    def rend(self):
        return _fm_index.StringVectorPairVector_rend(self)

    def clear(self):
        return _fm_index.StringVectorPairVector_clear(self)

    def get_allocator(self):
        return _fm_index.StringVectorPairVector_get_allocator(self)

    def pop_back(self):
        return _fm_index.StringVectorPairVector_pop_back(self)

    def erase(self, *args):
        return _fm_index.StringVectorPairVector_erase(self, *args)

    def __init__(self, *args):
        _fm_index.StringVectorPairVector_swiginit(self, _fm_index.new_StringVectorPairVector(*args))

    def push_back(self, x):
        return _fm_index.StringVectorPairVector_push_back(self, x)

    def front(self):
        return _fm_index.StringVectorPairVector_front(self)

    def back(self):
        return _fm_index.StringVectorPairVector_back(self)

    def assign(self, n, x):
        return _fm_index.StringVectorPairVector_assign(self, n, x)

    def resize(self, *args):
        return _fm_index.StringVectorPairVector_resize(self, *args)

    def insert(self, *args):
        return _fm_index.StringVectorPairVector_insert(self, *args)

    def reserve(self, n):
        return _fm_index.StringVectorPairVector_reserve(self, n)

    def capacity(self):
        return _fm_index.StringVectorPairVector_capacity(self)
    __swig_destroy__ = _fm_index.delete_StringVectorPairVector

# Register StringVectorPairVector in _fm_index:
_fm_index.StringVectorPairVector_swigregister(StringVectorPairVector)
class IntIntMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _fm_index.IntIntMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fm_index.IntIntMap___nonzero__(self)

    def __bool__(self):
        return _fm_index.IntIntMap___bool__(self)

    def __len__(self):
        return _fm_index.IntIntMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _fm_index.IntIntMap___getitem__(self, key)

    def __delitem__(self, key):
        return _fm_index.IntIntMap___delitem__(self, key)

    def has_key(self, key):
        return _fm_index.IntIntMap_has_key(self, key)

    def keys(self):
        return _fm_index.IntIntMap_keys(self)

    def values(self):
        return _fm_index.IntIntMap_values(self)

    def items(self):
        return _fm_index.IntIntMap_items(self)

    def __contains__(self, key):
        return _fm_index.IntIntMap___contains__(self, key)

    def key_iterator(self):
        return _fm_index.IntIntMap_key_iterator(self)

    def value_iterator(self):
        return _fm_index.IntIntMap_value_iterator(self)

    def __setitem__(self, *args):
        return _fm_index.IntIntMap___setitem__(self, *args)

    def asdict(self):
        return _fm_index.IntIntMap_asdict(self)

    def __init__(self, *args):
        _fm_index.IntIntMap_swiginit(self, _fm_index.new_IntIntMap(*args))

    def empty(self):
        return _fm_index.IntIntMap_empty(self)

    def size(self):
        return _fm_index.IntIntMap_size(self)

    def swap(self, v):
        return _fm_index.IntIntMap_swap(self, v)

    def begin(self):
        return _fm_index.IntIntMap_begin(self)

    def end(self):
        return _fm_index.IntIntMap_end(self)

    def clear(self):
        return _fm_index.IntIntMap_clear(self)

    def get_allocator(self):
        return _fm_index.IntIntMap_get_allocator(self)

    def count(self, x):
        return _fm_index.IntIntMap_count(self, x)

    def erase(self, *args):
        return _fm_index.IntIntMap_erase(self, *args)

    def find(self, x):
        return _fm_index.IntIntMap_find(self, x)
    __swig_destroy__ = _fm_index.delete_IntIntMap

# Register IntIntMap in _fm_index:
_fm_index.IntIntMap_swigregister(IntIntMap)
class IntStringMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _fm_index.IntStringMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _fm_index.IntStringMap___nonzero__(self)

    def __bool__(self):
        return _fm_index.IntStringMap___bool__(self)

    def __len__(self):
        return _fm_index.IntStringMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _fm_index.IntStringMap___getitem__(self, key)

    def __delitem__(self, key):
        return _fm_index.IntStringMap___delitem__(self, key)

    def has_key(self, key):
        return _fm_index.IntStringMap_has_key(self, key)

    def keys(self):
        return _fm_index.IntStringMap_keys(self)

    def values(self):
        return _fm_index.IntStringMap_values(self)

    def items(self):
        return _fm_index.IntStringMap_items(self)

    def __contains__(self, key):
        return _fm_index.IntStringMap___contains__(self, key)

    def key_iterator(self):
        return _fm_index.IntStringMap_key_iterator(self)

    def value_iterator(self):
        return _fm_index.IntStringMap_value_iterator(self)

    def __setitem__(self, *args):
        return _fm_index.IntStringMap___setitem__(self, *args)

    def asdict(self):
        return _fm_index.IntStringMap_asdict(self)

    def __init__(self, *args):
        _fm_index.IntStringMap_swiginit(self, _fm_index.new_IntStringMap(*args))

    def empty(self):
        return _fm_index.IntStringMap_empty(self)

    def size(self):
        return _fm_index.IntStringMap_size(self)

    def swap(self, v):
        return _fm_index.IntStringMap_swap(self, v)

    def begin(self):
        return _fm_index.IntStringMap_begin(self)

    def end(self):
        return _fm_index.IntStringMap_end(self)

    def clear(self):
        return _fm_index.IntStringMap_clear(self)

    def get_allocator(self):
        return _fm_index.IntStringMap_get_allocator(self)

    def count(self, x):
        return _fm_index.IntStringMap_count(self, x)

    def erase(self, *args):
        return _fm_index.IntStringMap_erase(self, *args)

    def find(self, x):
        return _fm_index.IntStringMap_find(self, x)
    __swig_destroy__ = _fm_index.delete_IntStringMap

# Register IntStringMap in _fm_index:
_fm_index.IntStringMap_swigregister(IntStringMap)
class FMIndex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _fm_index.FMIndex_swiginit(self, _fm_index.new_FMIndex())
    __swig_destroy__ = _fm_index.delete_FMIndex

    def initialize(self, data):
        return _fm_index.FMIndex_initialize(self, data)

    def initialize_from_file(self, file, width):
        return _fm_index.FMIndex_initialize_from_file(self, file, width)

    def backward_search_multi(self, query):
        return _fm_index.FMIndex_backward_search_multi(self, query)

    def backward_search_step(self, symbol, low, high):
        return _fm_index.FMIndex_backward_search_step(self, symbol, low, high)

    def distinct(self, low, high):
        return _fm_index.FMIndex_distinct(self, low, high)

    def distinct_count(self, low, high):
        return _fm_index.FMIndex_distinct_count(self, low, high)

    def distinct_count_multi(self, lows, highs):
        return _fm_index.FMIndex_distinct_count_multi(self, lows, highs)

    def size(self):
        return _fm_index.FMIndex_size(self)

    def locate(self, row):
        return _fm_index.FMIndex_locate(self, row)

    def extract_text(self, begin, end):
        return _fm_index.FMIndex_extract_text(self, begin, end)

    def save(self, path):
        return _fm_index.FMIndex_save(self, path)
    index = property(_fm_index.FMIndex_index_get, _fm_index.FMIndex_index_set)
    chars = property(_fm_index.FMIndex_chars_get, _fm_index.FMIndex_chars_set)
    rank_c_i = property(_fm_index.FMIndex_rank_c_i_get, _fm_index.FMIndex_rank_c_i_set)
    rank_c_j = property(_fm_index.FMIndex_rank_c_j_get, _fm_index.FMIndex_rank_c_j_set)

    def get_range(self, sequence):
        return _fm_index.FMIndex_get_range(self, sequence)

    def get_distinct(self, low, high):
        return _fm_index.FMIndex_get_distinct(self, low, high)

    def initialize_with_doc_info(self, documents):
        return _fm_index.FMIndex_initialize_with_doc_info(self, documents)

    def ngram_occurrence_count(self, low, high):
        return _fm_index.FMIndex_ngram_occurrence_count(self, low, high)

    def get_doc_id_by_position(self, position):
        return _fm_index.FMIndex_get_doc_id_by_position(self, position)
    occurring_distinct = property(_fm_index.FMIndex_occurring_distinct_get, _fm_index.FMIndex_occurring_distinct_set)
    doc_boundaries = property(_fm_index.FMIndex_doc_boundaries_get, _fm_index.FMIndex_doc_boundaries_set)
    doc_id_map = property(_fm_index.FMIndex_doc_id_map_get, _fm_index.FMIndex_doc_id_map_set)

# Register FMIndex in _fm_index:
_fm_index.FMIndex_swigregister(FMIndex)

def load_FMIndex(path):
    return _fm_index.load_FMIndex(path)
class FMIndexManager(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    docid_to_fm_index = property(_fm_index.FMIndexManager_docid_to_fm_index_get, _fm_index.FMIndexManager_docid_to_fm_index_set)

    def addDoc(self, docid, data):
        return _fm_index.FMIndexManager_addDoc(self, docid, data)

    def initialize(self, documents):
        return _fm_index.FMIndexManager_initialize(self, documents)

    def saveAll(self, fm_index_dir_path):
        return _fm_index.FMIndexManager_saveAll(self, fm_index_dir_path)

    def loadAll(self, fm_index_dir_path):
        return _fm_index.FMIndexManager_loadAll(self, fm_index_dir_path)

    def getFMIndex(self, docid):
        return _fm_index.FMIndexManager_getFMIndex(self, docid)

    def getDocCount(self):
        return _fm_index.FMIndexManager_getDocCount(self)

    def __init__(self):
        _fm_index.FMIndexManager_swiginit(self, _fm_index.new_FMIndexManager())
    __swig_destroy__ = _fm_index.delete_FMIndexManager

# Register FMIndexManager in _fm_index:
_fm_index.FMIndexManager_swigregister(FMIndexManager)

